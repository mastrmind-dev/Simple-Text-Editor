package texteditor;

import java.awt.Color;
import java.awt.FileDialog;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.regex.Pattern;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.UIManager;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;

public class TextEditorGui extends javax.swing.JFrame {
    String filename;
    Clipboard clipboard = getToolkit().getSystemClipboard();
    TextEditorCalculatorGui cal = new TextEditorCalculatorGui();
    
    public TextEditorGui() {
        initComponents();     
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rightClick = new javax.swing.JPopupMenu();
        copyRightClick = new javax.swing.JMenuItem();
        cutRightClick = new javax.swing.JMenuItem();
        pasteRightClick = new javax.swing.JMenuItem();
        selectAllRightClick = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        searchField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        replaceField = new javax.swing.JTextField();
        replaceButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        openFile = new javax.swing.JMenuItem();
        saveFile = new javax.swing.JMenuItem();
        saveAsFile = new javax.swing.JMenuItem();
        exitFile = new javax.swing.JMenuItem();
        disposeFile = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        cutText = new javax.swing.JMenuItem();
        copyText = new javax.swing.JMenuItem();
        pasteText = new javax.swing.JMenuItem();
        selectAllText = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();

        copyRightClick.setText("Copy");
        copyRightClick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyRightClickActionPerformed(evt);
            }
        });
        rightClick.add(copyRightClick);

        cutRightClick.setText("Cut");
        cutRightClick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutRightClickActionPerformed(evt);
            }
        });
        rightClick.add(cutRightClick);

        pasteRightClick.setText("Paste");
        pasteRightClick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteRightClickActionPerformed(evt);
            }
        });
        rightClick.add(pasteRightClick);

        selectAllRightClick.setText("Select All");
        selectAllRightClick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllRightClickActionPerformed(evt);
            }
        });
        rightClick.add(selectAllRightClick);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(0, 0));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        searchButton.setText("Find");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                textAreaMouseReleased(evt);
            }
        });
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textAreaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(textArea);

        replaceButton.setText("Replace");
        replaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                replaceButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(replaceField, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(replaceButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(replaceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(replaceField)
                    .addComponent(searchField)
                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE))
        );

        file.setText("File");

        newFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFile.setText("New");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        file.add(newFile);

        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFile.setText("Open");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        file.add(openFile);

        saveFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFile.setText("Save");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        file.add(saveFile);

        saveAsFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        saveAsFile.setText("Save As");
        saveAsFile.setEnabled(false);
        saveAsFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsFileActionPerformed(evt);
            }
        });
        file.add(saveAsFile);

        exitFile.setText("Exit");
        exitFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitFileActionPerformed(evt);
            }
        });
        file.add(exitFile);

        disposeFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        disposeFile.setText("Dispose(HiddenMenuItem)");
        disposeFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disposeFileActionPerformed(evt);
            }
        });
        file.add(disposeFile);

        jMenuBar1.add(file);

        edit.setText("Edit");

        cutText.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutText.setText("Cut");
        cutText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutTextActionPerformed(evt);
            }
        });
        edit.add(cutText);

        copyText.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyText.setText("Copy");
        copyText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyTextActionPerformed(evt);
            }
        });
        edit.add(copyText);

        pasteText.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteText.setText("Paste");
        pasteText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteTextActionPerformed(evt);
            }
        });
        edit.add(pasteText);

        selectAllText.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        selectAllText.setText("Select All");
        selectAllText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllTextActionPerformed(evt);
            }
        });
        edit.add(selectAllText);

        jMenuBar1.add(edit);

        jMenu1.setText("Calculator");
        jMenu1.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenu1MenuSelected(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        searchTextArea(textArea, searchField.getText());
    }//GEN-LAST:event_searchButtonActionPerformed

    class myHighlighter extends DefaultHighlighter.DefaultHighlightPainter{
        
        public myHighlighter(Color color) {
            super(color);
        }
        
    }
    DefaultHighlighter.HighlightPainter highlighter = new myHighlighter(Color.orange);

    private void pasteText() {
        try {
            Transferable pasteText = clipboard.getContents(TextEditorGui.this);
            String sel = (String) pasteText.getTransferData(DataFlavor.stringFlavor);
            textArea.replaceRange(sel, textArea.getSelectionStart(), textArea.getSelectionEnd());
        } catch (Exception e) {
            System.out.println("Didn't Work!");
        }
    }
    
    private void copyText(){
        String copyString = textArea.getSelectedText();
        StringSelection copySelection = new StringSelection(copyString);
        clipboard.setContents(copySelection, copySelection);
    }

    private void cutText(){
        String cutString = textArea.getSelectedText();
        StringSelection cutSelection = new StringSelection(cutString);
        clipboard.setContents(cutSelection, cutSelection);
        textArea.replaceRange("", textArea.getSelectionStart(), textArea.getSelectionEnd()); 
    }
    
    public void removeHighlight(JTextComponent textComp){
        Highlighter removeHighlighter = textComp.getHighlighter();
        //removeHighlighter.removeAllHighlights();//remvoe all the highlights at once
        
        //Below is an another method to remove hightlights
        Highlighter.Highlight[] remove = removeHighlighter.getHighlights();//gets an array list of highlights assigning words to numbers
         for(int i = 0; i < remove.length; i++){
            if(remove[i].getPainter() instanceof myHighlighter){//decide what color you want to remove, in this it's orange which belongs to myhighlighter
            removeHighlighter.removeHighlight(remove[i]);
            }
        }
    }

    public void searchTextArea(JTextComponent textComp, String textString){
        removeHighlight(textComp);
        try {
            Highlighter highlite = textComp.getHighlighter();
            Document doc = textComp.getDocument();
            String text = doc.getText(0, doc.getLength());
            
            int pos = 0;
            if(textString.length() != 0){
                    if(!text.toUpperCase().contains(textString.toUpperCase())){//if((pos = (text.toUpperCase()).indexOf((textString.toUpperCase()), pos)) < 0){
                        if(searchButton.getModel().isArmed()){
                            JOptionPane.showMessageDialog(this, "Word Not Found!");
                        }
                    }
                    while((pos = (text.toUpperCase()).indexOf((textString.toUpperCase()), pos)) >= 0){
                    highlite.addHighlight(pos, pos + textString.length(), highlighter);
                    pos += textString.length();
                    }
            }    
                 
        } catch (Exception e) {
            System.err.println("Word Not Found!");
        }
    }
    
    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        int response = JOptionPane.showConfirmDialog(cal, "Open new file in a new window?");
        if (response == 0) {
            TextEditorGui obj = new TextEditorGui();
            obj.setTitle("Sapthaka Texteditor");
            obj.setVisible(true);
            obj.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        }
        else if(response == 1){
            textArea.setText("");
            this.setTitle("Sapthaka Texteditor");
        }
    }//GEN-LAST:event_newFileActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        FileDialog filedialog = new FileDialog(TextEditorGui.this, "Open File", FileDialog.LOAD);
        filedialog.setVisible(true);
        
        if(filedialog.getFile() != null){
            filename = filedialog.getDirectory() + filedialog.getFile();
            setTitle(filename);
            try {
            FileReader fr = new FileReader(filename);
            FileReader nfr = new FileReader(filename);
            BufferedReader reader = new BufferedReader(fr);
            BufferedReader readerFor = new BufferedReader(nfr);
            StringBuilder sb = new StringBuilder();
            
            String line, lineFor;
            int count = 0;
            
            while((line = reader.readLine()) != null){
              count++;
            }
            for(int i = 1; i < count; i++){
                lineFor = readerFor.readLine();;            
                sb.append(lineFor + "\n");/*
                can use "System.lineSeparator()" to avoid platform dependecy. But when saving the file this code converts all the
                "\n"s into "System.lineSeparator()"s. (See "Save" feature) So you don't have to worry about platform dependency.
                If you want to replace "\n" with "Systme.lineSeparator()" in above line you shoul have to remove the line which replace 
                it in the Save feature. Otherwise it will cause to add newlines each time you save the file. Then you will have unneccessary
                new lines.
                 */    
                textArea.setText(sb.toString());
            }
            lineFor = readerFor.readLine();
            sb.append(lineFor);
            if(lineFor != null){
                textArea.setText(sb.toString());
            }
            reader.close();
            fr.close();
            saveAsFile.setEnabled(true);
        } catch (IOException e) {
            System.err.println("File Not Found!");
        }
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        if(filename == null){
            FileDialog filedialog = new FileDialog(TextEditorGui.this, "Save File", FileDialog.SAVE);
            filedialog.setVisible(true);
        
            if(filedialog.getFile() != null){
                filename = filedialog.getDirectory() + filedialog.getFile();
                setTitle(filename);
                try{
                    FileWriter filewriter = new FileWriter(filename);
                    String text = textArea.getText();
                    text = text.replace("\n", System.lineSeparator());//If you use "\\n" it will make \n as a word instead of a newline character
                    /**
                     *  String str = "sdasdasa&amp;adas&dasdasa";  
                        str = str.replaceAll("&(?!amp;)", "&amp;");//If you want to use regex possible way is replaceAll. Find regex list from javadoc
                        This would result in the string "sdasdasa&amp;adas&amp;dasdasa".
                        The regex pattern "&(?!amp;)" basically says: Match any occurrence of '&' that is not followed by 'amp;'.
                     */
                    filewriter.write(text);
                    setTitle(filename);
                    filewriter.close();
                    saveAsFile.setEnabled(true);
                }
                catch(IOException e){
                    System.err.println("File Not Found!");
                }
            }
        }
    }//GEN-LAST:event_saveFileActionPerformed

    private void disposeFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disposeFileActionPerformed
        System.exit(0);
    }//GEN-LAST:event_disposeFileActionPerformed
    
    private void cutTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutTextActionPerformed
        cutText();
    }//GEN-LAST:event_cutTextActionPerformed

    private void pasteTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteTextActionPerformed
        pasteText();
    }//GEN-LAST:event_pasteTextActionPerformed

    private void copyTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyTextActionPerformed
        copyText();
    }//GEN-LAST:event_copyTextActionPerformed

    private void cutRightClickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutRightClickActionPerformed
        cutText();
    }//GEN-LAST:event_cutRightClickActionPerformed

    private void pasteRightClickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteRightClickActionPerformed
        pasteText();
    }//GEN-LAST:event_pasteRightClickActionPerformed

    private void copyRightClickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyRightClickActionPerformed
        copyText();
    }//GEN-LAST:event_copyRightClickActionPerformed

    private void selectAllRightClickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllRightClickActionPerformed
        textArea.selectAll();
    }//GEN-LAST:event_selectAllRightClickActionPerformed

    private void selectAllTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllTextActionPerformed
        textArea.selectAll();
    }//GEN-LAST:event_selectAllTextActionPerformed

    private void textAreaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyReleased
        searchTextArea(textArea, searchField.getText());
    }//GEN-LAST:event_textAreaKeyReleased

    private void textAreaMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textAreaMouseReleased
        if(evt.isPopupTrigger()){
            //rightClick.show(this, evt.getX(), evt.getY());
            textArea.setComponentPopupMenu(rightClick);
        }
    }//GEN-LAST:event_textAreaMouseReleased

    private void jMenu1MenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenu1MenuSelected
        if (/*!(cal.allow == null)*/!cal.isVisible()) {
            cal.allow = 1;
            cal.setTitle("Calculator");
            cal.setResizable(false);
            cal.setVisible(true);
            cal.setState(JFrame.ICONIFIED);
            cal.setState(JFrame.NORMAL); 
            //cal.setBounds(0, 0, 210, 306);
        } else{
            cal.setState(JFrame.ICONIFIED);
            cal.setState(JFrame.NORMAL);
        }
    }//GEN-LAST:event_jMenu1MenuSelected

    private void replaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_replaceButtonActionPerformed
        String searchText = searchField.getText();
        String replaceText = replaceField.getText();
        String fullText = textArea.getText();
        if (!("".equals(searchText))) {
            fullText = fullText.replaceAll("(?i)" + Pattern.quote(searchText), replaceText);//see line no 384 and Pattern.quote fix that problem and for a case insensitive repalcement you have to use (?i)
            textArea.setText(fullText);
        }
    }//GEN-LAST:event_replaceButtonActionPerformed

    private void saveAsFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsFileActionPerformed
        FileDialog filedialog = new FileDialog(TextEditorGui.this, "Save File", FileDialog.SAVE);
        filedialog.setVisible(true);
        
        if(filedialog.getFile() != null){
            filename = filedialog.getDirectory() + filedialog.getFile();
            setTitle(filename);
            try{
            FileWriter filewriter = new FileWriter(filename);
            String text = textArea.getText();
            text = text.replace("\n", System.lineSeparator());// "\\n" will make \n as a word instead of a newline character
            /**
             *  String str = "sdasdasa&amp;adas&dasdasa";  
                str = str.replaceAll("&(?!amp;)", "&amp;");//If you want to use regex possible way is replaceAll. Find regex list from javadoc
                This would result in the string "sdasdasa&amp;adas&amp;dasdasa".
                The regex pattern "&(?!amp;)" basically says: Match any occurrence of '&' that is not followed by 'amp;'.
             */
            filewriter.write(text);
            setTitle(filename);
            filewriter.close();
        }
        catch(IOException e){
            System.err.println("File Not Found!");
        }
            
        
        }    }//GEN-LAST:event_saveAsFileActionPerformed

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        disposeFile.setVisible(false);
    }//GEN-LAST:event_formWindowActivated

    private void exitFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitFileActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditorGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditorGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditorGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditorGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextEditorGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem copyRightClick;
    private javax.swing.JMenuItem copyText;
    private javax.swing.JMenuItem cutRightClick;
    private javax.swing.JMenuItem cutText;
    private javax.swing.JMenuItem disposeFile;
    private javax.swing.JMenu edit;
    private javax.swing.JMenuItem exitFile;
    private javax.swing.JMenu file;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JMenuItem pasteRightClick;
    private javax.swing.JMenuItem pasteText;
    private javax.swing.JButton replaceButton;
    private javax.swing.JTextField replaceField;
    private javax.swing.JPopupMenu rightClick;
    private javax.swing.JMenuItem saveAsFile;
    private javax.swing.JMenuItem saveFile;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextField searchField;
    private javax.swing.JMenuItem selectAllRightClick;
    private javax.swing.JMenuItem selectAllText;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
